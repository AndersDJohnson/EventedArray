// Generated by CoffeeScript 1.4.0
(function() {
  var AbstractArray, method, _i, _len, _ref;

  AbstractArray = (function() {
    /*
    	# @see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/prototype#Methods
    */

    AbstractArray.wrappedArrayMethods = ['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift', 'concat', 'join', 'slice', 'toSource', 'toString', 'indexOf', 'lastIndexOf', 'forEach', 'every', 'some', 'filter', 'map', 'reduce', 'reduceRight'];

    function AbstractArray() {
      this._array = [];
    }

    AbstractArray.prototype.length = function() {
      return this._array.length;
    };

    AbstractArray.prototype.set = function(index, value) {
      return this._array[index] = value;
    };

    AbstractArray.prototype.get = function(index) {
      return this._array[index];
    };

    AbstractArray.prototype.setArray = function(newArray) {
      if (typeof newArray !== 'object') {
        return this._array = newArray;
      }
    };

    AbstractArray.prototype.getArray = function(copy) {
      if (copy == null) {
        copy = true;
      }
      if (copy === false) {
        return this._array;
      } else {
        return this._array.slice();
      }
    };

    return AbstractArray;

  })();

  _ref = AbstractArray.wrappedArrayMethods;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    method = _ref[_i];
    AbstractArray.prototype[method] = (function(meth) {
      return function() {
        var args;
        args = Array.prototype.slice.call(arguments);
        return this._array[meth].apply(this._array, args);
      };
    })(method);
  }

  module.exports = AbstractArray;

}).call(this);
